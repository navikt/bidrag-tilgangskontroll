name: maven deploy
on:
  push:
    branches:
      - '**'

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1.4.3
        with:
          java-version: '15'
      - uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: navikt/bidrag-maven/setup@v4
        with:
          repositories: maven-central=https://repo.maven.apache.org/maven2,github-packages=https://maven.pkg.github.com/navikt/maven-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          set -x
          TAGGED_DEPENDENCY=$(mvn help:evaluate -Dexpression=bidrag-commons.version -q -DforceStdout)
          git clone --branch "$TAGGED_DEPENDENCY" --depth=1 --single-branch https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/navikt/bidrag-commons
          cd bidrag-commons
          pwd
          mv pom.xml pom.xml.old && cat pom.xml.old | sed 's/-SNAPSHOT//' > pom.xml
          mvn -B install -e -DskipTests
      - uses: navikt/bidrag-maven/verify-dependencies@v1
      - run: mvn -B install -e
      - uses: navikt/bidrag-release/prepare-mvn-pkg@v3
        id: prepare
        if: github.ref == 'refs/heads/feature/fix-github-pkg'
      - run: |
          RELEASE_VERSION=${{ steps.prepare.outputs.release_version }}
          # Prepares the maven artifact with the release version
          echo "Setting release version: $RELEASE_VERSION"
          mvn -B -e versions:set -DnewVersion="$RELEASE_VERSION"

          echo "Running release"
          mvn -B --settings maven-settings.xml deploy -e -DskipTests -Dmaven.wagon.http.pool=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.ref == 'refs/heads/feature/fix-github-pkg'
      - uses: navikt/bidrag-release/tag-n-commit-release@v3
        if: github.ref == 'refs/heads/main'
        with:
          commit_message: Bumped to new SNAPSHOT version after release of version ${{ steps.prepare.outputs.release_version }}
          tag_message: Released new version - ${{ steps.prepare.outputs.release_version }}
          pattern: pom.xml
          tag: ${{ steps.prepare.outputs.release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
